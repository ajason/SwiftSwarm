//
//  ToolResponseHandler.swift
//  
//
//  Created by James Rochabrun on 10/21/24.
//

import Foundation

/// A protocol that defines the required behavior for handling tool responses.
///
/// `ToolResponseHandler` is designed to manage how tools and agents interact within the system,
/// allowing for the selection of agents based on parameters and handling the tool response content.
protocol ToolResponseHandler {
   
   /// The type of agent that this handler works with.
   ///
   /// `AgentType` must conform to the `AgentRepresentable` protocol, ensuring that
   /// it can be converted to or from an agent.
   associatedtype AgentType: AgentRepresentable
   
   /// A list of available agents that the handler can use.
   ///
   /// These agents represent the various entities or models that can be used in
   /// response generation, each with specific tools and capabilities.
   var agents: [AgentType] { get }
   
   /// Attempts to transfer the tool parameters to a matching agent.
   ///
   /// This method checks the provided parameters to find a suitable agent
   /// that matches the given tool keys and values, returning the corresponding agent if found.
   ///
   /// - Parameter parameters: A dictionary of parameters that may contain information
   ///   for selecting an agent.
   /// - Returns: An optional `Agent` that matches the parameters or `nil` if no match is found.
   func transferToAgent(_ parameters: [String: Any]) -> Agent?
   
   /// Handles the tool response content asynchronously.
   ///
   /// Given a set of parameters, this method processes the content generated by the tools
   /// and returns the resulting string asynchronously.
   ///
   /// - Parameter parameters: A dictionary of parameters containing tool inputs.
   /// - Returns: A string representing the tool's response content.
   /// - Throws: Any errors that may occur during content handling.
   func handleToolResponseContent(parameters: [String: Any]) async throws -> String?
}

extension ToolResponseHandler {
   
   /// Tries to transfer the tool parameters to a suitable agent based on tool keys.
   ///
   /// This method iterates over the available agents, checking their tool keys against the
   /// provided parameters. If a matching agent is found, it is returned.
   ///
   /// - Parameter parameters: A dictionary of parameters to match with an agent's tools.
   /// - Returns: An optional `Agent` that matches the provided parameters, or `nil` if no match is found.
   func transferToAgent(_ parameters: [String: Any]) -> Agent? {
      for agent in agents {
          let toolKeys = Set(agent.agent.tools.compactMap { tool -> [String]? in
              tool.function.parameters?.properties?.keys.map { $0 }
          }.flatMap { $0 })
          
          // Check if any of this agent's tool keys match with parameters
          for key in toolKeys {
              if let value = parameters[key] as? String,
                 agent.rawValue == value {
                  return agent.agent
              }
          }
      }
      return nil
   }
   
   /// A list of agents conforming to `AgentType`, ensuring that the handler has access to all cases.
   ///
   /// This computed property retrieves all agents that conform to `AgentType` and makes them available for use.
   var agents: [AgentType] {
      (AgentType.allCases as? [AgentType]) ?? []
   }
}
